const express = require('express');
const redis = require('redis');
const bodyParser = require('body-parser');
const dotenv = require('dotenv');

dotenv.config();

const app = express();
const redisClient = redis.createClient();

app.use(bodyParser.json());

const LOGIN_ERROR_LIMIT = 5; // Number of failed login attempts allowed
const LOGIN_LOCKOUT_TIME = 30 * 60; // Lockout time in seconds (30 minutes)

const checkLoginAttempts = (req, res, next) => {
  const { email } = req.body;
  redisClient.get(`login_attempts:${email}`, (err, attempts) => {
    if (err) {
      console.error('Redis error:', err);
      return res.status(500).json({ message: 'Internal server error' });
    }

    if (attempts >= LOGIN_ERROR_LIMIT) {
      return res.status(403).json({
        message: 'Too many failed login attempts. Please try again later.',
      });
    }

    next();
  });
};

app.post('/login', checkLoginAttempts, (req, res) => {
  const { email, password } = req.body;

  const isValidUser = email === 'user@example.com' && password === 'password123';

  if (!isValidUser) {
    redisClient.incr(`login_attempts:${email}`, (err, attempts) => {
      if (err) {
        console.error('Redis error:', err);
        return res.status(500).json({ message: 'Internal server error' });
      }

      if (attempts === 1) {
        redisClient.expire(`login_attempts:${email}`, LOGIN_LOCKOUT_TIME);
      }

      res.status(401).json({ message: 'Invalid email or password' });
    });
  } else {
    redisClient.del(`login_attempts:${email}`, (err) => {
      if (err) {
        console.error('Redis error:', err);
        return res.status(500).json({ message: 'Internal server error' });
      }

      res.status(200).json({ message: 'Login successful' });
    });
  }
});

app.post('/products', (req, res) => {
  const { name, price } = req.body;
  res.status(201).json({ message: 'Product created', product: { name, price } });
});

app.get('/products', (req, res) => {
  res.status(200).json({ message: 'Product list', products: [{ name: 'Sample', price: 10 }] });
});

app.put('/products/:id', (req, res) => {
  const { id } = req.params;
  const { name, price } = req.body;
  res.status(200).json({ message: `Product ${id} updated`, product: { name, price } });
});

app.delete('/products/:id', (req, res) => {
  const { id } = req.params;
  res.status(200).json({ message: `Product ${id} deleted` });
});

// Start the Express server
const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
  console.log(`Server is running on port ${PORT}`);
});
